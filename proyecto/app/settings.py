"""
Django settings for plantilla project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os 
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # Aplicaciones propias
    'correo', # esta gestiona todo lo relacionado con correos
]

# allauth

AUTHENTICATION_BACKENDS = [
   
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',

]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get("GOOGLE_CLIENT_ID"),
            'secret': os.environ.get("GOOGLE_CLIENT_SECRET"),
            'key': ''
        }
    }
}

ACCOUNT_USERNAME_REQUIRED = False  # No se requiere nombre de usuario
ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # Verificación obligatoria de correo electrónico
ACCOUNT_EMAIL_REQUIRED = True  # Correo electrónico es obligatorio
SOCIAL_AUTH_GOOGLE_REDIRECT_URI = "http://172.20.10.2:8000/accounts/google/login/callback/"
SOCIALACCOUNT_AUTO_SIGNUP = True  # Crear automáticamente la cuenta si no existe
SOCIALACCOUNT_LOGIN_ON_GET = True  # Redirigir automáticamente después de la autenticación
LOGIN_REDIRECT_URL = 'after' # app datosUsuario


SITE_ID = 1  # Replace with the actual ID of your site in the admin panel




MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', #     WHITENOISE
    "allauth.account.middleware.AccountMiddleware", # django-allautgh
]

# allauth


# CONFIGURACION CORREOS



# Configuración del backend de correo
# Django utiliza un backend para enviar correos electrónicos. En este caso, usaremos el backend SMTP.
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

# Configuración del servidor SMTP de Gmail
EMAIL_HOST = "smtp.gmail.com"  # Dirección del servidor SMTP de Gmail
EMAIL_PORT = 587  # Puerto para conexión segura con TLS
EMAIL_USE_TLS = True  # Usar TLS (Transport Layer Security) para cifrar la conexión

# Credenciales de tu cuenta de Gmail
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")  # Tu dirección de correo de Gmail
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")  # Contraseña específica para aplicaciones

# Configuración del remitente por defecto
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER  # Dirección que aparecerá como remitente en los correos




# CONFIGURACION CORREOS




ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

DB_USERNAME = os.environ.get("POSTGRES_USER")
DB_PASSWORD = os.environ.get("POSTGRES_PASSWORD")
DB_DATABASE = os.environ.get("POSTGRES_DB")
DB_HOST = os.environ.get("POSTGRES_HOST")
DB_PORT = os.environ.get("POSTGRES_PORT")
DB_AVIAL = all([
    DB_USERNAME,
    DB_PASSWORD,
    DB_DATABASE,
    DB_HOST,
    DB_PORT
])


POSTGRES_READY= str(os.environ.get('POSTGRES_READY')) == "1"



if DB_AVIAL and POSTGRES_READY:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME":  DB_DATABASE,
            "USER": DB_USERNAME,
            "PASSWORD": DB_PASSWORD,
            "HOST": DB_HOST,
            "PORT":  DB_PORT,
        }
    }

print(DATABASES)


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [BASE_DIR/ "static"] # Esto para tailwind
STATIC_ROOT = BASE_DIR.parent / "local-cdn" / "static" # esto esta fuera de django y se usaria para produccion supuestamente


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
